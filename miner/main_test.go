package miner

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/rsa"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"log"
	"math/big"
	"os"
	"testing"

	"github.com/bazo-blockchain/bazo-miner/p2p"
	"github.com/bazo-blockchain/bazo-miner/protocol"
	"github.com/bazo-blockchain/bazo-miner/storage"
)

const (
	TestDBFileName   = "test.db"
	TestIpPort       = "127.0.0.1:8000"
	TestKeyFileName  = "test_root"
)

const (
	PubA1 = "c2be9abbeaec39a066c2a09cee23bb9ab2a0b88f2880b1e785b4d317adf0dc7c"
	PubA2 = "8ce020fde838d9c443f6c93345dafe7fd74f091c4d2f30b37e2453679a257ed5"
	PrivA = "ba127fa8f802b008b9cdb58f4e44809d48f1b000cff750dda9cd6b312395c1c5"
	CommPubA = "18548212161594241704562086057105745474725101902253588258556723550630094870988762961560443068881642741657030368708672414829169963663387916382212493645579999921532548551718896960388598422072111998614042524402714882944809342207653938586247432016091165966941453061367573179570610572390465350003274179139174972419154383984809658470079788130967692120601258597645956151785354457176279523123870577986200270725135160744968043298436307626602608775682438224953565643149184132971403302816516228897647081726145971323873493321063058710948023038704239467348321824015654365987281556817284724506489623275566344874728267587394489105959"
	CommPrivA = "6101322272604004801363343626029352288693772171579151558325310073767239654375021009892427661915413495043139916209493262109758549775780348526294107725581177629558855023543280599845238640508881860111410786900128590666710404799008248898215086735781212992894454202922961725516627595397922578320194466543820041433179091769997401209056419160587414407754389278506049658344141726180996829142396326323523678439010285686037125993723217411896888116725764447545018382385967385899009133939542753318147197888688380763027551967658284077434023385424109163659493372822241257599260031869457278313773954695371964369000182149605049223073"
	CommPrimA1 = "136598108682464762089851494083412853461769123985092244664948043489054588374271886762240051790897467294590424184261046573957202328923834288067865132317080010851454748844452700256770858722563300749959817745930417000953184080412355537472574250810241337251285100187029022688051815635461829662004916105399244496009"
	CommPrimA2 = "135786742148175105247078183993594693384994151949620913387220760624603671575592380886045230815793631245821763921177835525069269675914535628194826138143118846599800042468407650349225192850926097141010035473805015604475143689225187471078446470382738137777526064728009591379166833112291525656588044981454094645551"

	PubB1 = "5d7eefd58e3d2f309471928ab4bbd104e52973372c159fa652b8ca6b57ff68b8"
	PubB2 = "ab301a6a77b201c416ddc13a2d33fdf200a5302f6f687e0ea09085debaf8a1d9"
	PrivB = "7a0a9babcc97ea7991ed67ed7f800f70c5e04e99718960ad8efab2ca052f00c7"
	CommPubB = "25573640311400093128478858711173061831877181730232818906534410727452314780673614793940258649322049972521495827653823770617819172612515191107425151831010287284270313530851682267929308543328555667666252131916433868013493241726099698244866907823701041776733728092504503056788818615424378669494727684294093410745015876631049225320396099033690334917623157279760632424234282365884844562402983801853699655023905025595244070287076746856539751442555140611822315012851491070004319730105822818718375184500619692603960735469562961918725612294755527323689632054182388078844884934971805643060962267323858274732593631387947688876177"
	CommPrivB = "2927406649924828702104893389249131175713606319181631863478968357986286608856271391490910789130018445974888409586325067170832955932360177665866662939045717307880981615094516385766905300701143241509868066796421668337537975486049101060973061667354398513954810689381094373133187623066568332065084564254913846642456889910243936778218455561201172589818111955455205053719304942647809806510266419564816208971735420403752688386745533366848772459970618686740490484257488520260984632772644201642815204390030034712920971405226133099265004625749744439821595826511684714549694504515554109930482353818424104025909129736963063258113"
	CommPrimB1 = "177101791279477793620199772020200451231990411679411809387621133870445836781515853663662968446141236135911952830807379126785121471699462175761451002670389804890060597629149512645945073010871325573403286562740864564753671032051560879500245013803025538007897035884411102681232069793238971739148024181671101331297"
	CommPrimB2 = "144400799826147868804302072328459177280315998357443807914897965377567042168611331418594419531559544324602720121939586303046018839278174187472284315861849711882567599815945094520153378603931466873172524488759569371229924712749154213772441468252425572369468738538758216397589165512749334245644136189034748469041"

	//Root account for testing
	PubRoot1 = "6323cc034597195ae69bcfb628ecdffa5989c7503154c566bab4a87f3e9910ac"
	PubRoot2 = "f6115b77a15852764c609c6a5c1739e698ebc6e49bf14617c561b9110039cec7"
	PrivRoot = "277ed539f56122c25a6fc115d07d632b47e71416c9aebf1beb54ee704f11842c"
	CommPubRoot = "22055150187090138729764095314568040458378608101666640500719485480294817407050630645209930290905830929476752614901923599934136960463184889511854668351578323784577825021301145191226670684944445986071938823543699344835055405404486621402844585221804190529837212944290510922201141152687976831053974034284718380988102268218464855537734745780626830319894243350023186048307794130473591412973077114595571885497070830769143374275027860406092869850721379702528642517160880619843945245252041110478560611104662083735727143889316292188665216789415033480355029221763771031931927818364421270018018462831383832944888283415557671198819"
	CommPrivRoot = "13837766765994162296552631875730095298961960213809460163710339555735578329195948571042115501651843416530426946185394456653367985676575056408409785433397151161909388392066798741444519460674591063083327776451369048938349988782322739604552642014974236086430205213181584732441044342239909048569637888761361293739986788579602838805206075258667901228702206161556467141885749854161764508704777631921550504537496967607434534499970188665773416657147152479598935697389108471667275545737851654332699815249378580316733651590975240127227709015348411354106687953359027890200153237022776512239726565805278448596288453946642217179601"
	CommPrimRoot1 = "162548783471194847171514896868604035348033075705848473309260449693804993292499303519538292775706946164758606910913287325488753895527002684223824234975124020085123534857593983933210417513350488173455739889281280813218913004044199713462781263376280698077441954850155591259264628182431186165998504507521310968123"
	CommPrimRoot2 = "135683268223280895899193474596567615185173157414538696675461908796042636831164847160504143661952450326108615523735520706062118157109478746083328245954573888417149066579627119492597262051183576441724374054809098483155091310872698235529860536531642408563320156790811696836650672043331554688737868445693137212153"


	//Multisig account for testing
	MultiSigPub1 = "d5a0c62eeaf699eeba121f92e08becd38577f57b83eba981dc057e92fde1ad22"
	MultiSigPub2 = "a480e4ee6ff8b4edbf9470631ec27d3b1eb27f210d5a994a7cbcffa3bfce958e"
	MultiSigPriv = "b8d1fa3cc7476eafca970ea222676647da1817d1d9dc602e9446290454ffe1a4"
)

//Globally accessible values for all other tests, (root)account-related
var (
	accA, accB, validatorAcc, multiSigAcc, rootAcc         	*protocol.Account
	PrivKeyAccA, PrivKeyAccB, PrivKeyMultiSig, PrivKeyRoot 	ecdsa.PrivateKey
	CommPrivKeyAccA, CommPrivKeyAccB, CommPrivKeyRoot	   	rsa.PrivateKey
	genesisBlock *protocol.Block
)

//Create some accounts that are used by the tests
func addTestingAccounts() {
	accA, accB, validatorAcc, multiSigAcc = new(protocol.Account), new(protocol.Account), new(protocol.Account), new(protocol.Account)

	pubAccA1, _ := new(big.Int).SetString(PubA1, 16)
	pubAccA2, _ := new(big.Int).SetString(PubA2, 16)
	privAccA, _ := new(big.Int).SetString(PrivA, 16)
	pubKeyAccA := ecdsa.PublicKey{
		elliptic.P256(),
		pubAccA1,
		pubAccA2,
	}
	PrivKeyAccA = ecdsa.PrivateKey{
		pubKeyAccA,
		privAccA,
	}

	CommPrivKeyAccA, _ = protocol.CreateRSAPrivKeyFromBase10(CommPubA, CommPrivA, []string{CommPrimA1, CommPrimA2})

	copy(accA.Address[0:32], PrivKeyAccA.PublicKey.X.Bytes())
	copy(accA.Address[32:64], PrivKeyAccA.PublicKey.Y.Bytes())
	copy(accA.CommitmentKey[:], CommPrivKeyAccA.PublicKey.N.Bytes())
	hashAccA := protocol.SerializeHashContent(accA.Address)

	pubAccB1, _ := new(big.Int).SetString(PubB1, 16)
	pubAccB2, _ := new(big.Int).SetString(PubB2, 16)
	privAccB, _ := new(big.Int).SetString(PrivB, 16)
	pubKeyAccB := ecdsa.PublicKey{
		elliptic.P256(),
		pubAccB1,
		pubAccB2,
	}
	PrivKeyAccB = ecdsa.PrivateKey{
		pubKeyAccB,
		privAccB,
	}

	CommPrivKeyAccB, _ = protocol.CreateRSAPrivKeyFromBase10(CommPubB, CommPrivB, []string{CommPrimB1, CommPrimB2})

	copy(accB.Address[0:32], PrivKeyAccB.PublicKey.X.Bytes())
	copy(accB.Address[32:64], PrivKeyAccB.PublicKey.Y.Bytes())
	copy(accB.CommitmentKey[:], CommPrivKeyAccB.PublicKey.N.Bytes())
	hashAccB := protocol.SerializeHashContent(accB.Address)

	privMultiSig, _ := new(big.Int).SetString(MultiSigPriv, 16)
	pubKeyMultiSig, _ := storage.GetPubKeyFromString(MultiSigPub1, MultiSigPub2)
	PrivKeyMultiSig = ecdsa.PrivateKey{
		pubKeyMultiSig,
		privMultiSig,
	}

	copy(multiSigAcc.Address[0:32], PrivKeyMultiSig.PublicKey.X.Bytes())
	copy(multiSigAcc.Address[32:64], PrivKeyMultiSig.PublicKey.Y.Bytes())
	hashMultiSig := protocol.SerializeHashContent(multiSigAcc.Address)

	//Set the global variable in blockchain.go
	multisigPubKey = &pubKeyMultiSig

	privKeyValidator, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)

	copy(validatorAcc.Address[:32], privKeyValidator.X.Bytes())
	copy(validatorAcc.Address[32:64], privKeyValidator.Y.Bytes())
	hashValidator := protocol.SerializeHashContent(validatorAcc.Address)

	//Create and store an initial commitment key for the validator account.
	commPrivKeyValidator, _ := rsa.GenerateMultiPrimeKey(rand.Reader, protocol.COMM_NOF_PRIMES, protocol.COMM_KEY_BITS_SIZE)
	copy(validatorAcc.CommitmentKey[:], commPrivKeyValidator.PublicKey.N.Bytes()[:])

	validatorAcc.Balance = activeParameters.Staking_minimum
	validatorAcc.IsStaking = true

	//Set the global variable in blockchain.go
	validatorAccAddress = validatorAcc.Address
	commPrivKey = commPrivKeyValidator

	storage.State[hashAccA] = accA
	storage.State[hashAccB] = accB
	storage.State[hashMultiSig] = multiSigAcc
	storage.State[hashValidator] = validatorAcc
}

//Create some root accounts that are used by the tests
func addRootAccounts() {
	rootAcc = new(protocol.Account)

	pubRoot1, _ := new(big.Int).SetString(PubRoot1, 16)
	pubRoot2, _ := new(big.Int).SetString(PubRoot2, 16)
	privRoot, _ := new(big.Int).SetString(PrivRoot, 16)
	pubKeyRoot := ecdsa.PublicKey{
		elliptic.P256(),
		pubRoot1,
		pubRoot2,
	}
	PrivKeyRoot = ecdsa.PrivateKey{
		pubKeyRoot,
		privRoot,
	}

	copy(rootAcc.Address[:32], PrivKeyRoot.X.Bytes())
	copy(rootAcc.Address[32:64], PrivKeyRoot.Y.Bytes())
	hashRoot := protocol.SerializeHashContent(rootAcc.Address)

	//Create root file
	file, _ := os.Create(TestKeyFileName)
	_, _ = file.WriteString(PubRoot1 + "\n")
	_, _ = file.WriteString(PubRoot2 + "\n")
	_, _ = file.WriteString(PrivRoot + "\n")

	CommPrivKeyRoot, _ := protocol.CreateRSAPrivKeyFromBase10(CommPubRoot, CommPrivRoot, []string{CommPrimRoot1, CommPrimRoot2})
	copy(rootAcc.CommitmentKey[:], CommPrivKeyRoot.PublicKey.N.Bytes()[:])

	rootAcc.Balance = activeParameters.Staking_minimum
	rootAcc.IsStaking = true

	storage.State[hashRoot] = rootAcc
	storage.RootKeys[hashRoot] = rootAcc
}

//The state changes (accounts, funds, system parameters etc.) need to be reverted before any new test starts
//So every test has the same view on the blockchain
func cleanAndPrepare() {
	storage.DeleteAll()

	tmpState := make(map[[32]byte]*protocol.Account)
	tmpRootKeys := make(map[[32]byte]*protocol.Account)

	storage.State = tmpState
	storage.RootKeys = tmpRootKeys

	lastBlock = nil

	globalBlockCount = -1
	localBlockCount = -1

	//Prepare system parameters
	targetTimes = []timerange{}
	currentTargetTime = new(timerange)
	target = append(target, 8)

	var tmpSlice []Parameters
	tmpSlice = append(tmpSlice, NewDefaultParameters())

	slashingDict = make(map[[32]byte]SlashingProof)

	parameterSlice = tmpSlice
	activeParameters = &tmpSlice[0]

	slashingDict = make(map[[32]byte]SlashingProof)

	genesisBlock = newBlock([32]byte{}, [protocol.COMM_KEY_LENGTH]byte{}, 0)
	decoded, _ := base64.RawURLEncoding.DecodeString(storage.GENESIS_COMM_PROOF)
	copy(genesisBlock.CommitmentProof[:], decoded)

	collectStatistics(genesisBlock)
	if err := storage.WriteClosedBlock(genesisBlock); err != nil {
		fmt.Printf("Error: %v\n", err)
	}
	if err := storage.WriteLastClosedBlock(genesisBlock); err != nil {
		fmt.Printf("Error: %v\n", err)
	}

	//Override some params to ensure tests work correctly.
	activeParameters.num_included_prev_proofs = 0
	activeParameters.Block_reward = 1
	activeParameters.Slash_reward = 1

	addTestingAccounts()
	addRootAccounts()

	//Some meaningful balance to simplify testing
	//validatorAcc.Balance = 1000
	accA.Balance = 123232345678
	accB.Balance = 823237654321
	accA.TxCnt = 0
	accB.TxCnt = 0
}

func TestMain(m *testing.M) {
	storage.Init(TestDBFileName, TestIpPort)
	p2p.Init(TestIpPort)

	cleanAndPrepare()
	addTestingAccounts()
	addRootAccounts()
	//We don't want logging msgs when testing, we have designated messages
	logger = log.New(nil, "", 0)
	logger.SetOutput(ioutil.Discard)
	retCode := m.Run()

	//Teardown
	storage.TearDown()
	os.Remove(TestDBFileName)
	os.Exit(retCode)
}
