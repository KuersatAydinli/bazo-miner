package protocol

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/rsa"
	"io/ioutil"
	"log"
	"math/big"
	"os"
	"testing"
)

const (
	PubA1 = "c2be9abbeaec39a066c2a09cee23bb9ab2a0b88f2880b1e785b4d317adf0dc7c"
	PubA2 = "8ce020fde838d9c443f6c93345dafe7fd74f091c4d2f30b37e2453679a257ed5"
	PrivA = "ba127fa8f802b008b9cdb58f4e44809d48f1b000cff750dda9cd6b312395c1c5"
	CommPubA = "18548212161594241704562086057105745474725101902253588258556723550630094870988762961560443068881642741657030368708672414829169963663387916382212493645579999921532548551718896960388598422072111998614042524402714882944809342207653938586247432016091165966941453061367573179570610572390465350003274179139174972419154383984809658470079788130967692120601258597645956151785354457176279523123870577986200270725135160744968043298436307626602608775682438224953565643149184132971403302816516228897647081726145971323873493321063058710948023038704239467348321824015654365987281556817284724506489623275566344874728267587394489105959"
	CommPrivA = "6101322272604004801363343626029352288693772171579151558325310073767239654375021009892427661915413495043139916209493262109758549775780348526294107725581177629558855023543280599845238640508881860111410786900128590666710404799008248898215086735781212992894454202922961725516627595397922578320194466543820041433179091769997401209056419160587414407754389278506049658344141726180996829142396326323523678439010285686037125993723217411896888116725764447545018382385967385899009133939542753318147197888688380763027551967658284077434023385424109163659493372822241257599260031869457278313773954695371964369000182149605049223073"
	CommPrim1A = "136598108682464762089851494083412853461769123985092244664948043489054588374271886762240051790897467294590424184261046573957202328923834288067865132317080010851454748844452700256770858722563300749959817745930417000953184080412355537472574250810241337251285100187029022688051815635461829662004916105399244496009"
	CommPrim2A = "135786742148175105247078183993594693384994151949620913387220760624603671575592380886045230815793631245821763921177835525069269675914535628194826138143118846599800042468407650349225192850926097141010035473805015604475143689225187471078446470382738137777526064728009591379166833112291525656588044981454094645551"
	PubB1 = "5d7eefd58e3d2f309471928ab4bbd104e52973372c159fa652b8ca6b57ff68b8"
	PubB2 = "ab301a6a77b201c416ddc13a2d33fdf200a5302f6f687e0ea09085debaf8a1d9"
	PrivB = "7a0a9babcc97ea7991ed67ed7f800f70c5e04e99718960ad8efab2ca052f00c7"
	CommPubB = "25573640311400093128478858711173061831877181730232818906534410727452314780673614793940258649322049972521495827653823770617819172612515191107425151831010287284270313530851682267929308543328555667666252131916433868013493241726099698244866907823701041776733728092504503056788818615424378669494727684294093410745015876631049225320396099033690334917623157279760632424234282365884844562402983801853699655023905025595244070287076746856539751442555140611822315012851491070004319730105822818718375184500619692603960735469562961918725612294755527323689632054182388078844884934971805643060962267323858274732593631387947688876177"
	CommPrivB = "2927406649924828702104893389249131175713606319181631863478968357986286608856271391490910789130018445974888409586325067170832955932360177665866662939045717307880981615094516385766905300701143241509868066796421668337537975486049101060973061667354398513954810689381094373133187623066568332065084564254913846642456889910243936778218455561201172589818111955455205053719304942647809806510266419564816208971735420403752688386745533366848772459970618686740490484257488520260984632772644201642815204390030034712920971405226133099265004625749744439821595826511684714549694504515554109930482353818424104025909129736963063258113"
	CommPrim1B = "177101791279477793620199772020200451231990411679411809387621133870445836781515853663662968446141236135911952830807379126785121471699462175761451002670389804890060597629149512645945073010871325573403286562740864564753671032051560879500245013803025538007897035884411102681232069793238971739148024181671101331297"
	CommPrim2B = "144400799826147868804302072328459177280315998357443807914897965377567042168611331418594419531559544324602720121939586303046018839278174187472284315861849711882567599815945094520153378603931466873172524488759569371229924712749154213772441468252425572369468738538758216397589165512749334245644136189034748469041"
)

const (
	//P-256
	RootPub1 = "6323cc034597195ae69bcfb628ecdffa5989c7503154c566bab4a87f3e9910ac"
	RootPub2 = "f6115b77a15852764c609c6a5c1739e698ebc6e49bf14617c561b9110039cec7"
	RootPriv = "277ed539f56122c25a6fc115d07d632b47e71416c9aebf1beb54ee704f11842c"
)

var (
	accA, accB, minerAcc 			*Account
	PrivKeyA, PrivKeyB   			ecdsa.PrivateKey
	PubKeyA, PubKeyB     			ecdsa.PublicKey
	RootPrivKey          			ecdsa.PrivateKey
	CommitmentKeyA, CommitmentKeyB 	rsa.PrivateKey
	MinerHash            			[32]byte
	MinerPrivKey         			*ecdsa.PrivateKey
)

func TestMain(m *testing.M) {

	addTestingAccounts()
	addRootAccounts()

	log.SetOutput(ioutil.Discard)
	os.Exit(m.Run())
}

func addTestingAccounts() {

	accA, accB, minerAcc = new(Account), new(Account), new(Account)

	puba1, _ := new(big.Int).SetString(PubA1, 16)
	puba2, _ := new(big.Int).SetString(PubA2, 16)
	priva, _ := new(big.Int).SetString(PrivA, 16)
	PubKeyA = ecdsa.PublicKey{
		elliptic.P256(),
		puba1,
		puba2,
	}
	PrivKeyA = ecdsa.PrivateKey{
		PubKeyA,
		priva,
	}

	CommitmentKeyA, _ = CreateRSAPrivKeyFromBase10(CommPubA, CommPrivA, []string{CommPrim1A, CommPrim2A})

	pubb1, _ := new(big.Int).SetString(PubB1, 16)
	pubb2, _ := new(big.Int).SetString(PubB2, 16)
	privb, _ := new(big.Int).SetString(PrivB, 16)
	PubKeyB = ecdsa.PublicKey{
		elliptic.P256(),
		pubb1,
		pubb2,
	}
	PrivKeyB = ecdsa.PrivateKey{
		PubKeyB,
		privb,
	}

	CommitmentKeyB, _ = CreateRSAPrivKeyFromBase10(CommPubB, CommPrivB, []string{CommPrim1B, CommPrim2B})

	copy(accA.Address[0:32], PrivKeyA.PublicKey.X.Bytes())
	copy(accA.Address[32:64], PrivKeyA.PublicKey.Y.Bytes())
	copy(accA.CommitmentKey[:], CommitmentKeyA.N.Bytes())
	accAHash := SerializeHashContent(accA.Address)

	//This one is just for testing purposes
	copy(accB.Address[0:32], PrivKeyB.PublicKey.X.Bytes())
	copy(accB.Address[32:64], PrivKeyB.PublicKey.Y.Bytes())
	copy(accB.CommitmentKey[:], CommitmentKeyB.N.Bytes())
	accBHash := SerializeHashContent(accB.Address)

	//just to bootstrap
	var shortHashA [8]byte
	var shortHashB [8]byte
	copy(shortHashA[:], accAHash[0:8])
	copy(shortHashB[:], accBHash[0:8])

	MinerPrivKey, _ = ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	var pubKey [64]byte
	var shortMiner [8]byte
	copy(pubKey[:32], MinerPrivKey.X.Bytes())
	copy(pubKey[32:], MinerPrivKey.Y.Bytes())
	MinerHash = SerializeHashContent(pubKey)
	copy(shortMiner[:], MinerHash[0:8])
	minerAcc.Address = pubKey
}

func addRootAccounts() {

	var pubKey [64]byte

	pub1, _ := new(big.Int).SetString(RootPub1, 16)
	pub2, _ := new(big.Int).SetString(RootPub2, 16)
	priv, _ := new(big.Int).SetString(RootPriv, 16)
	PubKeyA = ecdsa.PublicKey{
		elliptic.P256(),
		pub1,
		pub2,
	}
	RootPrivKey = ecdsa.PrivateKey{
		PubKeyA,
		priv,
	}

	copy(pubKey[32-len(pub1.Bytes()):32], pub1.Bytes())
	copy(pubKey[64-len(pub2.Bytes()):], pub2.Bytes())

	rootHash := SerializeHashContent(pubKey)

	var shortRootHash [8]byte
	copy(shortRootHash[:], rootHash[0:8])
}